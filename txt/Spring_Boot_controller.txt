=================================================================================
SPRING BOOT CONTROLLER
=================================================================================
1. CONTROLLER CLASS GENERALLY
2. CONTROLLER ANNOTATIONS
3. CONTROLLER DATA
4. CONTROLLER MODEL&VIEW MODE
5. CONTROLLER OBJECT MODE
6. CONTROLLER OBJECT/MODEL&VIEW MODE
7. RESPONSE ENTITY
8. DIRECT RESPONSE MANIPULATION
9. EXCEPTION HANDLING
10. IMPLEMENT REST CRUD API

=================================================================================
1. CONTROLLER CLASS GENERALLY
=================================================================================
A controller is practically a thread started by the Main class. There can be more controllers in an application.
A controller must be created under src/main/java/<package> folder.
This class must be a singleton in memory per controller.
The class must be public in order to let Spring accessing it.

The thinnest controller represents the API to the web application:
    - the @Controller annotation in a class marks that the class is a controller, normal API.
    - the @RestController annotation in a class marks that the class is a controller, REST API.

The normal API uses Spring MVC (Model-View-Controller) framework which is based upon views. The return value (the response body) represents a view (the targeted part of the frontend) and a collection of objects (forms a model which is read by the frontend). When a controller (or a controller method) operates with such data, it operates in model&view mode (or pure view mode).
The RESTful API uses Spring MVC REST framework which is based upon objects. The controller returns the object or value as it is, usually packed into a JSON or XML format. When a controller (or a controller method) operates with such data, it operates in called object mode.
Views can be handled along with complying the REST standard as well, for this the controller returns a ModelAndView object. When operating under such conditions, the mode falls under the object criteria (therefore this mode is usually called object/model&view mode).

EXAMPLE FOR A CONTROLLER CLASS (PURE @AUTOWIRED):
package PackageName;

import org.springframework.beans.factory.annotation.*;
import org.springframework.http.*;
import org.springframework.stereotype.*;
import org.springframework.ui.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.*;

@Controller //or:
@RestController
public class ControllerClassName {

    @Autowired
    private ServiceClassName service;

    //other fields

    //request handler (endpoint) methods
    //accessing a service method etc.: service.methodName()
}
END OF EXAMPLE

EXAMPLE FOR A CONTROLLER CLASS (@AUTOWIRED WITH CLASS DEPENDENCY INJECTION):
package PackageName;

import org.springframework.beans.factory.annotation.*;
import org.springframework.http.*;
import org.springframework.stereotype.*;
import org.springframework.ui.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.*;

@Controller //or:
@RestController
public class ControllerClassName {

    private final ServiceClassName service;
    //other fields

    @Autowired
    public ControllerClassName(ServiceClassName service) {
        this.service = service;
    }

    //request handler (endpoint) methods
    //accessing a service method etc.: service.methodName()
}
END OF EXAMPLE

In case something is sent to the console by invoking System.out.println(), the text will appear on the console of the web application, among Spring messages. Because the console carries a bunch of logs for every request, it is advised to insert a well visible line into.
A controller class contains request handler methods, and can contain subclasses, fields and other methods. Best practice is to keep a controller as thin as it is possible which means any helpers, variables should be declared in the Business layer, in its service class (see earlier).
Controller methods must be public so the Spring Boot can call them.

=================================================================================
2. CONTROLLER ANNOTATIONS
=================================================================================
With a controller, the next annotations can be used.

||ANNOTATION|POSITION|USED FOR||
||@Controller|before the class declaration|marks that the class is a controller (API)||
||@RestController|before the class declaration|marks that the class is a controller (REST API), object mode only||
||@ControllerAdvice|before the class declaration|marks that the controller contains general information about the operation of the controller||
||@RequestMapping|before the class declaration, after the @Controller or @RestController annotation|marks the root of all endpoints||
||@RequestMapping|before a method|marks that the method will be invoked when a request type with the endpoint is received||
||@GetMapping|before a method|marks that the method will be invoked when GET request with the endpoint is received||
||@PostMapping|before a method|marks that the method will be invoked when POST request with the endpoint is received||
||@PutMapping|before a method|marks that the method will be invoked when PUT request with the endpoint is received||
||@DeleteMapping|before a method|marks that the method will be invoked when DELETE request with the endpoint is received||
||@PatchMapping|before a method|marks that the method will be invoked when PATCH request with the endpoint is received||
||@ResponseBody|after request type annotation, before method signature, or before return value in signature|marks that the returned value will be sent to the frontend as object (object mode only)||
||@PathVariable|before a method argument|marks that the argument is found in endpoint path||
||@RequestParam|before a method argument|marks that the argument will be used for receiving the given parameter from the request query; object mode but not object/model&view mode||
||@RequestBody|before method argument|marks that the argument is in the request body, object mode but not object/model&view mode||
||@ModelAttribute|before a method|marks that the method defines object(s) to be added to all models beforehand (model&view and object/model&view modes)||
||@ModelAttribute|before a method argument|marks that the argument is passed by an incoming model of a template (model&view and object/model&view modes)||
||@NonNull|before method argument|marks that for that argument only non-null parameter is acceptable (modifies method signature, in case of null argument HTTP4xx code is sent back)||
||@ResponseStatus|before a method|defines a custom HTTP code which will be added to the answer from the endpoint when its method ends successfully||

The @RestController annotation automatically adds two annotations to the class on class-level:
    - @Controller
    - @ResponseBody
As a result, the class will be a REST controller, and all methods will operate in object mode.
When using the @ResponseBody annotation on class-level, will mark all controller methods.
In case the @ResponseBody annotation is used independently on controller methods, the annotation can be before the method signature or before the return value in the signature.

By using the @ControllerAdvise annotation the Spring is instructed to look for instructions how the controller should operate before activating any controller methods.
Such instruction can be e.g. controller exception handling or adding general objects to all models, see @ModelAttribute annotation on method level below.

Parameters of @Request/Get/Post/Put/Delete/PatchMapping:
    - "/endpoint" (can be used when only this parameter is given)
    - value = "/endpoint" (defines the endpoint)
    - path = "/endpoint" (same as previous)
    - consumes = contentType (in what context type the data will be received; optional)
    - produces = contentType (in what context type the data will be sent; optional)
    - method = POST or method = RequestMethod.POST (only for @RequestMapping, defines request type, value can be any request type)
    - headers="name=pankaj" (attribute value of which present needs to be in order to enter into the endpoint)
    - for all parameters, more values can be declared by following: parameter_name = {"value1", "value2", ...} (e.g. path = {"/endpoint1", "/endpoint2"} or headers={"name=pankaj", "id=1"})
In case there is no parameter defined for the annotation, will work as a default endpoint (useful when all not-defined queries should be redirected to the home endpoint).
In case "*" value is given as path, the endpoint will serve as fallback. In case of any not defined URI is used, custom data or view can be sent back, or redirects to home endpoint.

Parameters of @RequestParam:
    - name = "parameter_name_in_request"
    - required = true (optional; using false value is possible but leaving this argument means the same)
    - defaultValue = "default_value" (optional; if this argument does not exist and there is no passed value for the marked parameter, null will be passed)

The @ModelAttribute annotation can be used for two different tasks:
    - marking a general object to be added to all models in the controller before the correspondent endpoint method is started
    - marking an incoming parameter which is sent by model of a template
Using this functionality is optional.
When used on method-level, the method will not be used as an endpoint. When a class (can be the controller as well) contains such information, the @ControllerAdvice annotation must be used on class-level.
Spring allows for a method to have several arguments marked with @ModelAttribute, however it is very hard to specify proper mocked tests for such case. Declare a custom class for dealing with the payload, and use this class as the only one argument marked with @ModelAttribute.

Parameter versions of @ResponseStatus:
    - HttpStatus status
    - code = HttpStatus status
    - HttpStatus status, reason = reasonString
    - code = HttpStatus status, reason = reasonString

EXAMPLE FOR MAPPING PARAMETERS:
@RequestMapping(path = "/endpoint", produces = MediaType.APPLICATION_XML_VALUE)
@RequestMapping(method = RequestMethod.GET, path = "/endpoint", produces = MediaType.APPLICATION_XML_VALUE)
@RequestMapping(method = RequestMethod.GET, path = "/endpoint", consumes = "text/html", produces = {"application/xml", "application/json"})
@RequestMapping(method = POST, path = "/endpoint", produces = MediaType.APPLICATION_XML_VALUE)
@RequestMapping(method = {RequestMethod.POST,RequestMethod.GET}, path = "/endpoint")
@GetMapping("/endpoint")
@PutMapping(value = "/endpoint")
@PutMapping(value = "/endpoint", headers="name=pankaj")
@DeleteMapping(path = "/endpoint")
@PostMapping(path = "/endpoint", consumes = MediaType.APPLICATION_JSON_VALUE)
@PatchMapping(path = "/endpoint", consumes = MediaType.APPLICATION_JSON_VALUE)
END OF EXAMPLE

Using the @RequestMapping annotation for the whole class is useful when more controllers are defined and a controller covers a certain endpoint root (all endpoints starts with the same common part).
Also, common sent and accepted media types can be defined here as well.
It is possible to define a request type in this annotation explicitly, in this case the controller will let that request type to its methods only.
In case the backend represents a true API with the aim that the controller will serve as an interface for any frontend or other backends, best practice is that the root endpoint must show that the interface is an API and the version of the interface. With this technique, different versions can be represented in different controller classes as well.

EXAMPLE FOR USING @REQUESTMAPPING FOR A CLASS:
@Controller
@RequestMapping("/api/v1/abc")
public class ControllerClass1 {
    @PostMapping("/xyz") //the whole endpoint will be: /api/v1/abc/xyz
    public String method1() {...}
    @PutMapping("/ooo") //the whole endpoing will be: /api/v1/abc/ooo
    public String method2() {...}
}
...
@RestController
@RequestMapping("/api/v3.2")
public class ControllerClass2 {
    @PostMapping("/xyz") //the whole endpoint will be: /api/v3.2/xyz
    public String method1() {...}
    @PutMapping("/ooo") //the whole endpoing will be: /api/v3.2/ooo
    public String method2() {...}
}
...
@RestController
@RequestMapping(value = "/api/v1", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
public class ControllerClass3 {
    @PostMapping("/xyz") //the whole endpoint will be: /api/v1/xyz, sends and accepts JSON
    public String method1() {...}
    @PutMapping("/ooo") //the whole endpoint will be: /api/v1/ooo, sends and accepts JSON
    public String method2() {...}
}
END OF EXAMPLE

Some content type definitions with MediaType:
    - MediaType.APPLICATION_JSON_VALUE
    - MediaType.APPLICATION_JSON_UTF8_VALUE
    - MediaType.APPLICATION_XML_VALUE
    - MediaType.TEXT_HTML

Some content type definitions with Content-Type:
    - application/json
    - application/xml
    - text/html

=================================================================================
3. CONTROLLER DATA
=================================================================================
In controller methods, there can be the next kind of incoming and outgoing data:
    - request type definition (in method annotation)
    - incoming content type definition (how the JSON data is deserialized when received from the frontend, object mode)
    - outgoing content type definition (how the JSON data is serialized when sent to the frontend, object mode)
    - request body parameters (marked in method annotation, received in argument list, object mode)
    - query parameters (in argument list, object mode)
    - model attributes (submitted from the form of a template, sent by browser; model&view and object/model&view modes)
    - Model (sent to a template; model&view mode)
    - ModelAndView (sent to a template, object/model&view mode)
    - view (model&view and object/model&view modes)
    - sent data (all modes)
    - HTTP response code (HTTP status code, all modes)

The Spring Boot automatically handles the HTTP response code (e.g. 200, 404, 500) sent to the frontend, it is not needed to send these explicitly.
Of course, can be overwritten manually by using ResponseEntity (see later) or ModelAndView (see the SPRING MODELANDVIEW page).

When an endpoint finishes without fail (exception), the HTTP200 (OK) code is added to the response.
This code can be overwritten via using the @ResponseStatus(HttpStatus status) method-level annotation.
In case the annotation is used in @ResponseStatus(HttpStatus status, reason = reasonString) formula, the successfully finished endpoint will return an HTML error page with the given reasonString which forces this method out of REST compatibility.

In model&view mode, the return value of the controller method will be a String containing the web page or template (file) name.
In this version, the method signature must contain a Model argument which will be filled with the data sent toward the frontend.
Also, if the frontend sends data with the request, there must be any number of argument marked with @ModelAttribute annotation, per every incoming object.
Please note, the model is handled by Spring in the background, contains the incoming model objects sent by the frontend, and unless not deleted manually, the new added objects will be merged with the original objects. If that is not acceptable (e.g. the new model will be sent to a new view), clear the model before accepting new objects by accessing the Model object from the method signature.

In object mode, the returned data will be JSON data, generated from serialized data of the returned object of the method, this would be sent to the frontend.
In this version, there is no Model in the argument list.
If the response contains only a literal or a wrapper object (not String which would mark view mode by default), using the @ResponseBody annotation is optional.
If the response is a custom object (List, array, Map, any other custom class), the handling method must be marked with @ResponseBody annotation.
The whole controller can be marked with @ResponseBody annotation on class-level. In this case no additional method-level marking is needed and all endpoints will be in object mode.

For both techniques, in case the content type is not defined, uses standard coding.
As for incoming requests in object mode, an endpoint can receive JSON data only in the defined (or default) format. For different content types, different endpoints must be created. In case no format is defined, the Spring Boot will use the best appropriate format.
In older Spring versions, in controller, the method signature elements and the return type must be object types (wrapper types are included). Newer versions can accept literally every serializable type.
Please note, in case the method signature contains custom class (e.g. a payload), that class must have default constructor (no arguments) and all setters of its fields (mutability), or Spring will be unable to bind the incoming data, which results missing the endpoint and the server sends HTTP404 (page not found) back to the caller.

In object/model&view mode, there can be a Model object in the method signature however it is not obligatory, the return value will be a ModelAndView object.
For incoming data, arguments are needed, marked with @ModelAttribute annotation, just like in model&view mode.
Please note, similarly to model&view mode, the model is handled by Spring in the background, contains the incoming model objects sent by the frontend, and unless not deleted manually, the new added objects will be merged with the original objects. If that is not acceptable (e.g. the new model will be sent to a new view), clear the model before accepting new objects by accessing the Model object from the method signature.

The controller data only exists in the controller layer. This means the Model or the ModelAndView objects must be created in-place and can not be send outside via a method contract.

The frontend intents to send objects to the backend. These objects can be received one-by-one by the proper endpoint method which, in case of more objects, can increase the method signature size.
Data binding means that Spring parses the incoming data to method arguments marked with proper annotations.
As first step before invoking the method of the endpoint, Spring examines whether the marked argument will receive an object from the frontend. In case of no matching incoming object, Spring tries to initialise a new object by calling proper constructor and passes that object to the argument.
Please note, in case of Collection or more @ModelAttribute arguments, it is difficult to write working mocking unit test for the controller method. Proper solution is to declare a payload class containing fields for all possible data and receive only that payload in the controller method signature. This payload class needs to have setters next to the constructors and getters in order to let Spring manipulate its instances freely, therefore the payload class is not immutable. However, fields should be private.

For model&view mode, optionally, the method signature can contain a RedirectAttributes argument with which additional attributes can be added to the Model before redirection.
For all modes, optionally, the method signature can contain a BindingResult argument. This argument will tell if data binding was successful.
For all modes, optionally, the method signature can contain a MultipartFile or a MultipartFile[] argument, through them uploaded files can be received, sent by the frontend. Visit the SPRING BOOT THYMELEAF and SPRING BOOT FILE STORAGE WITH THYMELEAF EXAMPLE pages for details.

EXAMPLE FOR DECLARING PAYLOAD CLASS:
package ...;

//imports

public class Payload {
    //private fields

    public Payload() {}
    public Payload(all fields) {...}
    //optionally:
    public Payload(field variation 1) {...}
    ...
    public Payload(field variation n) {...}

    //getters, setters, equals(), hashCode(), toString()
}
END OF EXAMPLE

=================================================================================
4. CONTROLLER MODEL&VIEW MODE
=================================================================================
In order to use model&view mode on a controller method, the controller class must not be marked with @RestController annotation, nor the correspondent method marked with @ResponseBody annotation.
The return value must be a String which holds the name of the web page or the template. In case of webpage, the extension is optionally can be written after the page filename.
For incoming data sent by the frontend, in the method signature method arguments are needed, marked with the @ModelAttribute argument-level annotation.
In case the frontend does not send data, no such argument is needed.

In case data should be sent to the frontend, in the method signature a Model object should be placed as argument.
Initially, the Model object contains the incoming objects and the new data will be put into it by the Business layer. Any kind of object can be added to the model represented by this object.
The Model is extending the Map interface where keys are HTML attributes, values are Objects rendered to them. Of course, the value type can be narrowed down for e.g. String.
The Model object is created by Spring Boot. No legal constructor is available which means objects can be added to these objects but creating new one nor assigning new one to its variable must be prevented.
As for making the controller method testable, model attributes should be added to the Model within the controller method, the Business layer should provide the attribute data themselves.

An incoming request can be redirected to an other view by using the "redirect:/" text before the returned view name. It is typically used for root queries. Also, optionally a RedirectAttributes object can be used for adding additional data to the Model.
Forwarding is possible as well by using the "forward:/" formula in the returned view name, similarly.

When using a Controller class in model&view mode, Spring utilizes Spring MVC (MVC stands for Model-View-Controller). This system provides double-layered Communication layer. The lower layer is the controller class itself with controller methods. The upper layer is called the servlet, it handles the communication itself: binds incoming data to argument data for the methods, and binds outgoing data from the prepared models from the controller methods.

EXAMPLE FOR REDIRECTING A QUERY:
@GetMapping("/")
public String root() {
    return "redirect:/index";
}

@PostMapping("/endpoint")
public String method(RedirectAttributes redirectAttributes, Model model) {
    redirectAttributes.addFlashAttribute("attribute_name", attributeValue);
    return "redirect:/new_target";
}
END OF EXAMPLE

EXAMPLE FOR DEFINING GENERAL MODEL ATTRIBUTE IN A CONTROLLER:
package ...;

//imports

@RestController
@ControllerAdvice
class Controller {

    @ModelAttribute
    public void addAttributes(Model model) {
        model.addAttribute("attribute_name", value);
    }

    //endpoints
}
END OF EXAMPLE

For controller and service method examples on model&view mode, visit the SPRING MODELANDVIEW page.
See SPRING BOOT REQUESTS page for code examples.

=================================================================================
5. CONTROLLER OBJECT MODE
=================================================================================
In order to use object mode on a controller method, the controller class must be marked with @RestController annotation, or the correspondent method marked with @ResponseBody annotation.
The return value can be any type or a Map with String keys and Object values where keys are HTML attribute names and values are their respective values (make sure all Objects are convertible to String and back).
In the method signature, every incoming object (sent by frontend) must be marked with @RequestBody annotation.
Instead of utilizing a payload class for data transfer in and out, using any wrapper or other classes is appropriate.
Alternatively, all incoming objects can be rendered into one Map of String keys and Object or String values, also marked with @RequestBody annotation.

EXAMPLE FOR CONTROLLER AND SERVICE METHODS (OBJECT MODE, PAYLOAD):
@ResponseBody
public Payload controllerMethod(@RequestParam("payload") Payload payload, BindingResult bindingResult) { //using BindingResult is optional
    //optional part:
    if (bindingResult.hasErrors()) {
        return service.serviceErrorMethod();
    }
	return service.serviceMethod(payload);
}
...
public Payload serviceMethod(Payload payload) {
    //process
	return new Payload(...);
}
public Payload serviceErrorMethod() {
    //process
	return new Payload(...);
}
END OF EXAMPLE

EXAMPLE FOR CONTROLLER AND SERVICE METHODS (OBJECT MODE, MAP):
@ResponseBody
public Map<String, Object> controllerMethod(@RequestParam("map") Map<String, Object> map, BindingResult bindingResult) { //using BindingResult is optional
    //optional part:
    if (bindingResult.hasErrors()) {
        return service.serviceErrorMethod();
    }
	return service.serviceMethod(map);
}
...
public Map<String, Object> serviceMethod(Map<String, Object> map) {
    //process
    Map<String, Object> newMap = new HashMap<>();
    //add elements to newMap
	return newMap;
}
public Map<String, Object> serviceErrorMethod() {
    //process
    Map<String, Object> newMap = new HashMap<>();
    //add elements to newMap
	return newMap;
}
END OF EXAMPLE

See SPRING BOOT REQUESTS page for code examples.

=================================================================================
6. CONTROLLER OBJECT/MODEL&VIEW MODE
=================================================================================
The ModelAndView object can be used as return type of the controller method. As such, will contain the view name along with the model.
There is no need for including a Model object to the argument list since will not use these.
The ModelAndView object has legal constructors, a new instance, filled with proper data, must be the return value.
Using this class as return value invokes the object/model&view mode for the controller method and complies to the REST standard (@RestController, @ResponseBody is applicable).

EXAMPLE FOR DEFINING GENERAL MODEL ATTRIBUTE IN A CONTROLLER:
package ...;

//imports

@RestController
@ControllerAdvice
class Controller {

    @ModelAttribute
    public void addAttributes(Model model) {
        model.addAttribute("attribute_name", value);
    }

    //endpoints
}
END OF EXAMPLE

For controller and service method examples on object/model&view mode, visit the SPRING MODELANDVIEW page.
See the SPRING MODELANDVIEW page for further details, and the SPRING BOOT REQUESTS page for code examples.

=================================================================================
7. RESPONSE ENTITY
=================================================================================
The ResponseEntity represents the whole HTTP response: status, header and body.
By using it as return value, the response is fully customizable.
The ResponseEntity can have any class type due to being generic.
The response body can contain an object (wrappers are included) or a literal.
Whilst using ResponseEntity can make a specific controller method customizable for response, due to Spring's capabilities, it is advised to use the methods in pure model&view or object mode for cleaner code.

In some cases when not using String-type ResponseEntity, exception can be raised upon sending the method return value.
For such cases an exception handler method (marked with the @ExceptionHandler annotation) is needed among controller methods. When an endpoint raises exception, this method will run. The return code of this method is defined with the @ResponseStatus annotation.
Visit the SPRING EXCEPTION HANDLING page for description.

Constructor argument variations:
    - responseBodyObject, HttpStatus
    - responseBodyObject, HttpHeaders, HttpStatus

The ResponseEntity has two nested interfaces which provide additional functionality on method level:
    - HeadersBuilder
    - BodyBuilder

Some of the methods coming from these interfaces:
    - BodyBuilder accepted(): defines the HTTP code
    - BodyBuilder badRequest(): defines the HTTP code
    - BodyBuilder ok(): defines the HTTP code
    - BodyBuilder created(java.net.URI location)
    - BodyBuilder status(HttpStatus status): defines the HTTP code
    - BodyBuilder status(int status): defines the HTTP code
    - HeadersBuilder<?> noContent()
    - HeadersBuilder<?> notFound()
    - ResponseEntity body(value): defines the response body, must be used as last method

Typical usage of BodyBuilder methods:
    - ResponseEntity.methodNameOfStatus(value)
    - ResponseEntity.methodNameOfStatus().body(value)
    - ResponseEntity.methodNameOfStatus().header("headerName", "headerValue").body(value)

With using HeaderBuilder, no properties of the response body can be set.

EXAMPLE FOR CONTROLLER METHODS WITH RESPONSE ENTITY:
@GetMapping("/endpoint1")
public ResponseEntity<String> controllerMethod1(...) {
    return new ResponseEntity<>(value, HttpStatus.OK);
}

@GetMapping("/endpoint2")
public ResponseEntity<String> controllerMethod2(...) {
    if (condition) {
        return new ResponseEntity<>(value1, HttpStatus.BAD_REQUEST);
    }
    return new ResponseEntity<>(value2, HttpStatus.OK);
}

@GetMapping("/endpoint3")
public ResponseEntity<String> controllerMethod3(...) {
    HttpHeaders headers = new HttpHeaders();
    headers.add(headerName, headerValue);
    return new ResponseEntity<>(value, headers, HttpStatus.OK);
}

@GetMapping("/endpoint4")
public ResponseEntity<String> controllerMethod4(...) {
    return ResponseEntity.ok(value);
}

@GetMapping("/endpoint5")
public ResponseEntity<String> controllerMethod5(...) {
    if (condition) {
        return ResponseEntity
                .badRequest()
                .body(value1);
    }
    return ResponseEntity
            .status(HttpStatus.OK)
            .body(value2);
}

@GetMapping("/endpoint6")
public ResponseEntity<String> controllerMethod6(...) {
    return ResponseEntity
            .ok()
            .header(headerName, headerValue)
            .body(value);
}
END OF EXAMPLE

=================================================================================
8. DIRECT RESPONSE MANIPULATION
=================================================================================
Spring lets the HttpServletResponse object to be accessed.
Via this object, direct manipulation is possible.
However, because this technique is not covered (protected) by any abstractions and capabilities provided by Spring, using it should be avoided.

EXAMPLE FOR CONTROLLER METHOD WITH DIRECT RESPONSE MANIPULATION (HTTPSERVLETRESPONSE):
import javax.servlet.http.HttpServletResponse;
...
@GetMapping("/manual")
public void controllerMethod(HttpServletResponse response) throws IOException {
    response.setHeader(headerName, headerValue);
    response.setStatus(statusNumber);
    response.getWriter().println(value);
}
END OF EXAMPLE

=================================================================================
9. EXCEPTION HANDLING
=================================================================================
When an endpoint fails, an exception is raised and a HTTP500 error code is sent back to the client by default.
(For reference, when there is no proper endpoint or method signature for a request, HTTP error code will be sent back but no exception will be raised.)
For such cases one or more handler methods must be defined.

Visit the SPRING EXCEPTION HANDLING page for description.

=================================================================================
10. IMPLEMENT REST CRUD API
=================================================================================
When a REST API publishes the CRUD (Create-Retrieve-Update-Delete) functions, must follow industrial standard unless the app design declares differently.

||API FUNCTION|REQUEST TYPE|ENDPOINT|REQUEST BODY|RESPONSE BODY|HTTP SUCCESS CODE||
||create|POST|api/v1/elementName|all fields (ID is excluded)|all fields (ID is included)|200||
||retrieve one|GET|api/v1/elementName?id=idNumber or api/v1/elementName/idNumber|-|all fields (ID is included)|200||
||retrieve all|GET|api/v1/elementNames or api/v1/allElementName|-|all elements in array, per element all fields (ID is included)|200||
||full update|PUT|api/v1/elementName|all fields (ID is included)|all fields (modified version; ID is included)|200||
||partial update|PATCH|api/v1/elementName/idNumber|only the fields which need to be updated (ID can not be given)|all fields (modified version; ID is included)|200||
||delete|DELETE|api/v1/elementName/idNumber|-|-|204 (No Content)||

The HTTP success code is generated by Spring Boot automatically.
In case Spring but not Spring Boot is used, the code should generate them.

Naturally, the API can publish other functions as well next to the CRUD.

=>SPRING BOOT
=>SPRING BOOT REQUESTS
=>SPRING MODELANDVIEW
=>SPRING BOOT VALIDATION
=>SPRING BOOT CONTROLLER TESTS
=>SPRING BOOT THYMELEAF
=>SPRING BOOT FILE STORAGE WITH THYMELEAF EXAMPLE
=>SERIALIZATION
=>SPRING EXCEPTION HANDLING
