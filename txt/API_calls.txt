=================================================================================
API CALLS
=================================================================================
It is possible to call an external API by a web application.
This technique is useful for any applications following monolith but essential for applications following hexagonal and microservices designs.
The server which publishes the public API will get a request and returns a text which is usually an unformatted JSON.
In order to process the JSON process the received String or use a JSON parser before processing.

In microservices architecture, the incoming (frontend) requests arrive to the gateway controller first. This controller calls internal endpoints (microservices) to create data which must be returned to the frontend.
In such model the API calls are essential. In Spring, an internal call is executed via a RestTemplate instance.
In case of using RestTemplate, it is best practice to create a RestTemplate bean and inject that into the gateway controller, instead of creating instances per endpoints. The bean is created in a configuration class.

EXAMPLE FOR API CALL, RECEIVED RESPONSEENTITY VIA RESTTEMPLATE:
/*
Configuration
*/
@Configuration
public class GatewayConfiguration {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}

/*
API gateway or simple controller
DTO: Data Transfer Object which will be received from inner API call, sent by the called microservice or outer service
the choosen restTemplate method decides GET/POST/PUT/DELETE microservice call and in not GET case its argument the send object can be given
if the controller has a service class, it must be injected as well
*/
@RestController
...
    @Autowired
    private RestTemplate restTemplate;
...
//endpoint 1 receives no data, sends no data to microservice
@GetMapping("outer endpoint 1")
public ModelAndView gatewayMethod1() {
	String internalServiceUrl1 = "inner endpoint 1";
	ResponseEntity<DTO> responseEntity = restTemplate.getForEntity(internalServiceUrl1, DTO.class);
	return new ModelAndView("view_name", "objectName", responseEntity.getBody());
}
//endpoint 2 receives data in request body, and sends it to microservice
@GetMapping("outer endpoint 2")
public ResponseEntity<DTO> gatewayMethod2(@RequestBody MyRequestObject requestObject) {
	String internalServiceUrl2 = "inner endpoint 2";
	ResponseEntity<DTO> responseEntity = restTemplate.postForEntity(internalServiceUrl2, requestObject, DTO.class);
	return ResponseEntity.ok(responseEntity.getBody());
}
//endpoint 3 receives Model, and sends data to microservice, returns ModelAndView
@GetMapping("outer endpoint 3")
public ModelAndView gatewayMethod3(Model model) {
	String internalServiceUrl2 = "inner endpoint 3";
	ResponseEntity<DTO> responseEntity = restTemplate.postForEntity(internalServiceUrl2, model.asMap(), DTO.class);
	return new ModelAndView("view_name", "attributeName", responseEntity.getBody());
}

/*
Called microservice or outer service 1
returns DTO with HTTP success code
DTO: Data Transfer Object generated by the microservice or the outer service
*/
@GetMapping("inner endpoint 1")
public DTO microserviceMethod1() {
	model.asMap().clear();
	return service.serviceMethod1();
}

/*
Called microservice or outer service 2
receives MyRequestObject in request body
returns ResponseEntity with controlled HTTP code
DTO: Data Transfer Object generated by the microservice or the outer service
*/
@GetMapping("inner endpoint 2")
public ResponseEntity<DTO> microserviceMethod2(@RequestBody MyRequestObject requestObject) {
	return ResponseEntity.ok(service.serviceMethod2(requestObject));
}

/*
Called microservice or outer service 3
receives MyRequestObject in request body
returns ResponseEntity with controlled HTTP code
DTO: Data Transfer Object generated by the microservice or the outer service
*/
@GetMapping("inner endpoint 2")
public ResponseEntity<DTO> microserviceMethod3(@RequestBody Map<Object, Object> requestObject) {
	return ResponseEntity.ok(service.serviceMethod3(requestObject));
}
END OF EXAMPLE

EXAMPLE FOR API CALL, RECEIVED A RAW STRING:
/*
Call an outer service from any code block
examples of requestString:
    "https://www.metaweather.com/api/location/search/?query=London" or
    "https://www.metaweather.com/api/location/44418" or
    "http://localhost:8080"
*/
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;
...
public String request(String requestString) {
	try {
		//set request data to the external API
		URL url = new URL(requestString);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod("GET");

		//make request to the API
		conn.connect();

		//check API response code
		int responseCode = conn.getResponseCode();
		if (responseCode >= 200 && responseCode <= 299) {
			throw new RuntimeException("HttpResponseCode: " + responseCode);
		}

		//collect and return results
		StringBuilder stringBuilder = new StringBuilder();
		Scanner scanner = new Scanner(url.openStream());
		while (scanner.hasNext()) {
			stringBuilder.append(scanner.nextLine());
		}
		scanner.close();
		return stringBuilder.toString();
	}
	catch (Exception e) {
		throw new RuntimeException(e.getMessage());
	}
}
END OF EXAMPLE

EXAMPLE FOR API CALL, RECEIVED JSON:
/*
Call an outer service from any code block
examples of requestString:
    "https://www.metaweather.com/api/location/search/?query=London" or
    "https://www.metaweather.com/api/location/44418" or
    "http://localhost:8080"
*/
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;
...
try {
    //set request data to the external API
    URL url = new URL("request string"); //e.g. "https://www.metaweather.com/api/location/search/?query=London"
    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    conn.setRequestMethod("GET");

    //make request to the API
    conn.connect();

    //check API response code
    int responseCode = conn.getResponseCode();
    if (responseCode >= 200 && responseCode <= 299) {
        throw new RuntimeException("HttpResponseCode: " + responseCode);
    }

    //collect results
    StringBuilder informationString = new StringBuilder();
    Scanner scanner = new Scanner(url.openStream());
    while (scanner.hasNext()) {
        informationString.append(scanner.nextLine());
    }
    scanner.close();

    //process informationString.toString() as a JSON text without formatting, or:
    JSONParser parse = new JSONParser();
    JSONArray dataObject = (JSONArray) parse.parse(String.valueOf(informationString));

    int jsonArraySize = (JSONObject) dataObject.size();

    int objectIndex = 2; //or other number
    JSONObject data = (JSONObject) dataObject.get(objectIndex);
    String dataString = data.get("variable_name");
}
catch (Exception e) {
    throw new RuntimeException(e.getMessage());
}
END OF EXAMPLE

=>WEB APPLICATION
=>SPRING MODELANDVIEW
=>APPLICATION ARCHITECTURES
