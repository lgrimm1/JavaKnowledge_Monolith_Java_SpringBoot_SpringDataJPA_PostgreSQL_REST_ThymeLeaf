=================================================================================
API CALLS
=================================================================================
It is possible to call an external API by a web application.
This technique is useful for any applications following monolith but essential for applications following hexagonal and microservices designs.
The server which publishes the public API will get a request and returns a text which is usually an unformatted JSON.
In order to process the JSON process the received String or use a JSON parser before processing.

EXAMPLE FOR API CALL, RECEIVED RESPONSEENTITY VIA RESTTEMPLATE:
/*
API gateway or simple controller
DTO: Data Transfer Object which will be received from inner API call, sent by the called microservice or outer service
the choosen restTemplate method decides GET/POST/PUT/DELETE microservice call and in not GET case its argument the send object can be given
*/
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.*;
import org.springframework.web.servlet.*;
...
@GetMapping("outer endpoint")
public ModelAndView listSources() {
	RestTemplate restTemplate = new RestTemplate();
	String internalServiceUrl = "inner endpoint";
	ResponseEntity<DTO> responseEntity = restTemplate.getForEntity(internalServiceUrl, DTO.class);
	return new ModelAndView("view_name", "objectName", responseEntity.getBody());
}

/*
Called microservice or outer service
the service returns DTO
DTO: Data Transfer Object generated by the microservice or the outer service
*/
@GetMapping("inner endpoint")
public ListSourcesDTO listSources(Model model) {
	model.asMap().clear();
	return service.listSources();
}
END OF EXAMPLE

EXAMPLE FOR API CALL, RECEIVED A RAW STRING:
/*
Call an outer service from any code block
examples of requestString:
    "https://www.metaweather.com/api/location/search/?query=London" or
    "https://www.metaweather.com/api/location/44418" or
    "http://localhost:8080"
*/
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;
...
public String request(String requestString) {
	try {
		//set request data to the external API
		URL url = new URL(requestString);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod("GET");

		//make request to the API
		conn.connect();

		//check API response code
		int responseCode = conn.getResponseCode();
		if (responseCode >= 200 && responseCode <= 299) {
			throw new RuntimeException("HttpResponseCode: " + responseCode);
		}

		//collect and return results
		StringBuilder stringBuilder = new StringBuilder();
		Scanner scanner = new Scanner(url.openStream());
		while (scanner.hasNext()) {
			stringBuilder.append(scanner.nextLine());
		}
		scanner.close();
		return stringBuilder.toString();
	}
	catch (Exception e) {
		throw new RuntimeException(e.getMessage());
	}
}
END OF EXAMPLE

EXAMPLE FOR API CALL, RECEIVED JSON:
/*
Call an outer service from any code block
examples of requestString:
    "https://www.metaweather.com/api/location/search/?query=London" or
    "https://www.metaweather.com/api/location/44418" or
    "http://localhost:8080"
*/
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;
...
try {
    //set request data to the external API
    URL url = new URL("request string"); //e.g. "https://www.metaweather.com/api/location/search/?query=London"
    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    conn.setRequestMethod("GET");

    //make request to the API
    conn.connect();

    //check API response code
    int responseCode = conn.getResponseCode();
    if (responseCode >= 200 && responseCode <= 299) {
        throw new RuntimeException("HttpResponseCode: " + responseCode);
    }

    //collect results
    StringBuilder informationString = new StringBuilder();
    Scanner scanner = new Scanner(url.openStream());
    while (scanner.hasNext()) {
        informationString.append(scanner.nextLine());
    }
    scanner.close();

    //process informationString.toString() as a JSON text without formatting, or:
    JSONParser parse = new JSONParser();
    JSONArray dataObject = (JSONArray) parse.parse(String.valueOf(informationString));

    int jsonArraySize = (JSONObject) dataObject.size();

    int objectIndex = 2; //or other number
    JSONObject data = (JSONObject) dataObject.get(objectIndex);
    String dataString = data.get("variable_name");
}
catch (Exception e) {
    throw new RuntimeException(e.getMessage());
}
END OF EXAMPLE

=>WEB APPLICATION
=>SPRING MODELANDVIEW
=>APPLICATION ARCHITECTURES
