=================================================================================
SPRING MODELANDVIEW
=================================================================================
1. GENERALLY
2. CONTROLLER AND SERVICE WITH MODEL&VIEW
3. CONSTRUCTORS
4. METHODS
5. TESTING

=================================================================================
1. GENERALLY
=================================================================================
The Communication layer as a whole, or endpoints of the layer can work in two basic modes:
    - model&view mode
    - object mode
Included by the object mode, the endpoint or the layer can work in object/model&view mode.

The model&view and the object/model&view modes cover working with models and templates. That means the sent payload is rendered into a view and a model.
Spring transforms the view to a template reference.
The model can contain several objects and this as a package is sent to the template.

When dealing with views and models, the ModelAndView class becomes handy. It merges the View and the Model objects into one object which is returnable so testable as well.
This means that this class can be used in data traffic between the frontend and the backend, or more concretely, between the Controller and the servlet layers, and the servlet layer and the frontend.
When you want to send data downward (toward the business layer), extract data from the ModelAndView object beforehand (e.g. as a Map or a payload).
When you want to send data toward the outer world, create the ModelAndView object in the Communication layer.
Please note, unless an endpoint does not return an object (e.g. a ModelAndView object) but only a view name, the endpoint can not comply to the REST standard (no @RestController nor @ResponseBody annotations can be used).

It has high importance that the model and the view is handled by Spring in the background.
The view defined by its template name in the return value of the controller method, will be rendered into a View object.
The model contains objects sent by the frontend when entering into the endpoint. In case this data is not needed (mostly when different view will be reached from the endpoint), as first act in the method, the model must be cleared.

=================================================================================
2. CONTROLLER AND SERVICE WITH MODEL&VIEW
=================================================================================
In order to form an API, thin controller is needed. That means the controller is separated from the Business layer. Thin controller means thin endpoints along.
In order to receive data from a view, use a custom payload class which will contain all possible data from the view.
Generating outgoing model is part of the Communication layer. The data connection between the controller and the service should be established via passing payload object or more attributes extracted from the model.

A Payload class as data model can be very handful when more attributes are sent or received by the controller.
In case the Business layer indicates failure, best practice is to raise an Exception within. The controller will receive it and call other service method to generate an alternative Payload. In case of more possible outcomes for failure, pass the exception message or the Exception object itself to the handler as well.

EXAMPLE FOR A POSSIBLE PAYLOAD CLASS DEFINITION:
class Payload {
    //private fields
    //default constructor
    //full constructor
    //getters, setters, hashCode(), equals(), toString()
}
END OF EXAMPLE

EXAMPLE FOR SERVICE METHOD:
public Payload serviceMethod(Payload payload) {
    if (payload == null || ...) {
        throw new RuntimeException("message");
    }
    //process payload
    Payload payload2 = new Payload(...);
    return payload2;
}

public Payload serviceMethodForException(Payload payload, String exceptionMessage) { //or:
public Payload serviceMethodForException(Payload payload, Exception e) {
    //process payload and exceptionMessage, or:
    //process payload and exception by checking its class of the latter with instanceof
    Payload payload2 = new Payload(...);
    return payload2;
}
END OF EXAMPLE

2.1. NO-REST ENDPOINT
2.2. REST ENDPOINT

2.1. NO-REST ENDPOINT
---------------------------------------------------------------------------------
The controller method receives a new (empty) Model object in its argument list, created by Spring. This Model should be filled with objects to be sent to the frontend. There is no public constructor for Model, and this object must be used for preparing the payload.

EXAMPLE FOR THIN CONTROLLER ENDPOINT (MODEL&VIEW MODE):
@GetMapping("/endpoint") //or other request type(s)
public String controllerMethod(@ModelAttribute Payload payload, BindingResult bindingResult, Model model) {
    model.asMap().clear();
    if (bindingResult.hasErrors()) {
        //return an error view and objects
    }
    Payload payload2;
    String view;
    try {
	    payload2 = serviceObject.serviceMethod(payload);
	    view = ...;
	}
	catch (Exception e) {
	    payload2 = serviceObject.serviceMethodForException(payload, e.getMessage());
	    view = ...;
	}
	model.addAllAttribute("payload", payload2);
	return view;
}
END OF EXAMPLE

The Model part of ModelAndView object contains objects, organized into a Map<String, Object> type where the keys are HTML attribute names, the values are the corresponding objects of any class. In order to access a value, casting will be necessary in the Business layer.

2.2. REST ENDPOINT
---------------------------------------------------------------------------------
The controller method does not receive an object created by Spring but a new ModelAndView will be created or used within the controller, will be filled with objects, defined the view name in it, and this payload will be sent to the frontend.

EXAMPLE FOR THIN CONTROLLER ENDPOINT (OBJECT/MODEL&VIEW MODE):
@GetMapping("/endpoint") //or other request type(s)
public ModelAndView controllerMethod(@ModelAttribute Payload payload, BindingResult bindingResult, Model model) {
    model.asMap().clear();
    if (bindingResult.hasErrors()) {
        //return a new ModelAndView object with error view and objects
    }
    Payload payload2;
    String view;
    try {
	    payload2 = serviceObject.serviceMethod(payload);
	    view = ...;
	}
	catch (Exception e) {
	    payload2 = serviceObject.serviceMethodForException(payload, e.getMessage());
	    view = ...;
	}
	return new ModelAndView(view, "payload", payload2);
}
END OF EXAMPLE

The Model part of ModelAndView object contains objects, organized into a Map<String, Object> type where the keys are HTML attribute names, the values are the corresponding objects of any class. In order to access a value, casting will be necessary in the Business layer.

=================================================================================
3. CONSTRUCTORS
=================================================================================
The constructor parameters of ModelAndView can have the next main variants:
    - String viewName
    - View view
    - String viewName, Map<String, ?> model
    - View view, Map<String, ?> model
    - String viewName, HttpStatusCode status
    - String viewName, Map<String, ?> model, HttpStatusCode status
    - (no arguments)

It is possible to create a ModelAndView object without defining the view name (or the View). This can be done only by giving no arguments to the constructor.

=================================================================================
4. METHODS
=================================================================================
The ModelAndView has the next methods.

||MODELANDVIEW METHOD|DESCRIPTION||
||addObject("Html_attribute_name", object)|adds an object to the payload with its HTTP attribute name||
||addObject(object)|adds an object to the payload, HTTP attribute name is automatically set||
||addAllObjects(Map<String, ?>)|adds the content of the Map to the payload, HTTP attribute names are the keys||
||setViewName("view_name")|sets the view||
||setView(View view)|sets the view||
||setStatus(HttpStatusCode status)|sets the response status||
||clear()|deletes all data||
||isEmpty()|checks whether no data in it||
||wasCleared()|checks whether it was cleared||
||hasView()|checks whether it has view||
||getViewName()|returns the name of the view||
||getView()|returns the View||
||getModel()|returns the model as Map<String, Object>||
||getStatus()|returns the HttpStatusCode||
||getModelMap()|returns a ModelMap||

The returned View object has one method:
    - getContentType(): returns the content-type as String

The returned ModelMap has methods with which the attribute names and objects can be managed.
This class is inherited from the Map interface, additional methods are below.

||MODELMAP METHOD|DESCRIPTION||
||addAttribute("Html_attribute_name", object)|adds an object to the payload with its HTTP attribute name||
||addAttribute(object)|adds an object to the payload, HTTP attribute name is automatically set||
||addAllAttributes(Map<String, ?>)|adds the content of the Map to the payload, HTTP attribute names are the keys||
||addAllAttributes(Collection<?>)|adds the content of the Collection to the payload, HTTP attribute names is automatically set||
||containsAttribute("attribute_name")|checks whether the attribute is contained||
||getAttribute("attribute_name")|returns the object by the attribute name (needs type casting afterwards)||
||mergeAttributes(Map<String, ?>)|-||

The return value of add...() and merge...() methods is ModelMap therefore it is possible to chain these methods.

EXAMPLE FOR CHAINING MODELMAP METHODS:
public ModelAndView serviceMethod(String initialView) {
    Map<String, Object> modelMap = new HashMap<>();
    //fill the Map with objects
    ModelAndView modelAndView = new ModelAndView(initialView);
    modelAndView.getModelMap()
            .addAttribute("attribute_name1", object1)
            .addAttribute("attribute_name2", object2)
            .addAttribute("attribute_name3", object3)
            .mergeAttributes(modelMap);
}
END OF EXAMPLE

=================================================================================
5. TESTING
=================================================================================
Full test of an attribute requires tree steps:
    - checking existence of the attribute
    - checking class of the attribute
    - checking content of the attribute

With JUnit, please note that in tests when stored attributes are checked with Assertions, assertEquals(true|false, ...) is preferred over assertTrue|assertFalse() on Boolean HTML attributes.
Similarly, assertEquals(new ArrayList<>(), ...) is preferred over checking emptiness of a List with assertTrue|assertFalse(...isEmpty()).

For MockMVC tests, visit the SPRING BOOT CONTROLLER TESTS page.

EXAMPLE FOR TESTING MODELANDVIEW (JUNIT ASSERTIONS):
ModelAndView actualModelAndView = ...;

Assertions.assertTrue(actualModelAndView.hasView());
Assertions.assertEquals("view_name", actualModelAndView.getViewName());

ModelMap modelMap = actualModelAndView.getModelMap();
Assertions.assertEquals(numberOfExpectedContainedAttributes, modelMap.size());

//check against expected value (generally)
Assertions.assertTrue(modelMap.containsAttribute("html_attribute_name"));
Assertions.assertTrue(modelMap.getAttribute("html_attribute_name") instanceof ClassName);
Assertions.assertEquals(expectedValue, modelMap.getAttribute("html_attribute_name"));

//check Boolean
Assertions.assertTrue(modelMap.containsAttribute("html_attribute_name"));
Assertions.assertTrue(modelMap.getAttribute("html_attribute_name") instanceof Boolean);
Assertions.assertEquals(true, modelMap.getAttribute("html_attribute_name"));

//check String against emptiness
Assertions.assertTrue(modelMap.containsAttribute("html_attribute_name"));
Assertions.assertTrue(modelMap.getAttribute("html_attribute_name") instanceof String);
Assertions.assertEquals("", modelMap.getAttribute("html_attribute_name"));

//check List against emptiness
Assertions.assertTrue(modelMap.containsAttribute("html_array_attribute_name"));
Assertions.assertTrue(modelMap.getAttribute("html_array_attribute_name") instanceof List);
Assertions.assertEquals(new ArrayList<>(), modelMap.getAttribute("html_array_attribute_name"));
END OF EXAMPLE

EXAMPLE FOR TESTING MODELANDVIEW (MODELANDVIEWASSERT, PER ATTRIBUTE):
ModelAndView actualModelAndView = ...;

ModelAndViewAssert.assertViewName(actualModelAndView, "view_name");
//per attribute:
ModelAndViewAssert.assertModelAttributeAvailable(actualModelAndView, "html_attribute_name");
ModelAndViewAssert.assertAndReturnModelAttributeOfType(actualModelAndView, "html_attribute_name", Element.class);
ModelAndViewAssert.assertModelAttributeValue(actualModelAndView, "html_attribute_name", attribute_value);
END OF EXAMPLE

EXAMPLE FOR TESTING MODELANDVIEW (MODELANDVIEWASSERT, PER MODEL):
ModelAndView expectedModelAndView = ...;
ModelAndView actualModelAndView = ...;

ModelAndViewAssert.assertViewName(actualModelAndView, "view_name");
ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, expectedModelAndView.getModel());
END OF EXAMPLE

EXAMPLE FOR TESTING MODELANDVIEW (MODELANDVIEWASSERT, PAYLOAD):
//definition of Payload class

Payload expectedPayload = new Payload(...);
Map<String, Object> model = new HashMap<>();
model.put("payload", expectedPayload);

ModelAndView actualModelAndView = ...;

ModelAndViewAssert.assertViewName(actualModelAndView, "view_name");
ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
END OF EXAMPLE

=>WEB APPLICATION
=>MAP
=>SPRING BOOT THYMELEAF
=>SPRING BOOT REQUESTS
=>SPRING BOOT CONTROLLER
=>SPRING BOOT TESTS
=>SPRING BOOT CONTROLLER TESTS
=>JUNIT
=>SPRING EXCEPTION HANDLING
=>SPRING BOOT VALIDATION
=>API CALLS
