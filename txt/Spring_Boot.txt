=================================================================================
SPRING BOOT
=================================================================================
The Spring is a framework family for web applications.
The Spring Boot is part of the Spring frameworks family in which the Boot provides a universal bridge over Spring frameworks.
It is a common interface of and to Spring Core, Spring Web, Spring Data and Spring MVC frameworks, extended with Spring test environment.
By using it, setting up the backend part becomes a much simplified process.
The Spring Boot framework hides the complexity of the web part of an application so the developer can concentrate mainly on the business logic.
This framework adds another layer between the Communication and the frontend, managed by the frontend and the backend together as the backend fills it with data, the frontend reads data and fills it with other data, then the backend reads those data.

Following best practices, a thin Communication layer manifested as pure Controller class(es) (see later) provides a web API to the backend.
Spring Boot supports web API and REST API.

In case Spring Boot is used alongside with template managers (e.g. Spring Boot ThymeLeaf), creation of whole web application becomes possible (frontend via templates, backend web development).
Optionally, further boiler-coding time can be spared when instead of manual checking of database elements (entities) in the Business layer, Spring Boot Validation is utilized.

1. SETTING UP
2. CREATING CLASSES AND DIRECTORIES
3. CLASS DEPENDENCIES IN SPRING
4. MAIN (APPLICATION) CLASS
5. ENTITY
6. REPOSITORY
7. SERVICE CLASS
8. CONTROLLER CLASS
9. CONFIGURATION
10. JSON AND XML CONVERSION
11. START AND STOP WEB APPLICATION

=================================================================================
1. SETTING UP
=================================================================================
1.1. MANUALLY
1.2. WITH SPRING INITIALIZR
1.3. DATABASE CONNECTION
1.4. PRE-SETTINGS

1.1. MANUALLY
---------------------------------------------------------------------------------
In order to address the framework, the following tags should be inserted into pom.xml.
After modifying the pom.xml, in IntelliJ IDEA, right-click on the pom.xml and select the Maven/Reload Project menu item.
Alternative way is to type "mvn compile" to make Maven to find and install all what is needed.
The parent tag marks the version root of dependencies.

The dependencies are modular: add anything you need and leave anything you do not.
The Spring Web provides web support for REST API and Spring MVC, and uses Apache Tomcat as default container.
The Spring Test dependency is part of the Spring Boot.
The Spring Test dependency includes Mockito dependency.

On database side, several database systems can be added.
In case the Storage layer is a file-level or a List-based in-memory solution, no database dependency should be added.
In case of not in-memory nor file-level database solution, installing and-or creating access to the specific database is necessary.

The Spring Data provides the interface towards databases. Add it only when database dependency is added as well.
Spring Data can work together with many SQL and NoSQL database systems like these:
    - H2 (fast in-memory SQL)
    - mySQL
    - PostgreSQL (postgres)
    - Oracle
    - SQL Server
    - MongoDB
Spring Boot (Spring Data) can handle more data connections parallel, more dependencies can be inserted if more solutions are needed.
Depending on which database system should be used along with Data, add one or more dependencies.

EXAMPLE FOR BUILDING UP SPRING BOOT DEPENDENCY:
<!-- under the modelVersion tag, above dependencies: -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

<!-- if there is not, create a block under the properties block: -->
    <dependencies>
    </dependencies>

<!-- inside, add the next dependencies: -->
<!-- (it is possible to define version tag with all dependencies) -->
<!-- (in case of no version tag, the best compatible version read from the parent tag, will be used by Maven) -->
        <!-- Starter Web, Starter Test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

        <!-- Data JPA -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

        <!-- SQL databases, choose one or more -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
        <dependency>
        	<groupId>mysql</groupId>
        	<artifactId>mysql-connector-java</artifactId>
        	<scope>runtime</scope>
        </dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
        <dependency>
        	<groupId>com.oracle.database.jdbc</groupId>
        	<artifactId>ojdbc8</artifactId>
	        <scope>12.2.0.1</scope>
        </dependency>
        <dependency>
        	<groupId>com.microsoft.sqlserver</groupId>
        	<artifactId>mssql-jdbc</artifactId>
        	<scope>runtime</scope>
        </dependency>

        <!-- MongoDB NoSQL database -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
END OF EXAMPLE

Finally, under dependencies add the Spring Boot version of Maven (during tests, this element was not found by Intellij/Maven, remains red in pom.xml but causes no error).
EXAMPLE FOR ADDING MAVEN PLUGIN:
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
END OF EXAMPLE

1.2. WITH SPRING INITIALIZR
---------------------------------------------------------------------------------
The Spring Initializr is available on the start.spring.io website.
Here, after giving the details of the new project, it will create a brand-new structure of directories and starting files, downloadable.
Any frameworks, dependencies, Java version, IDE name can be chosen, and the website will personalize the initial structure along with pom.xml of Maven etc.
It is very convenient way in case of a new project and can be used for extending an existing one by checking files and directories against.
The Spring Test dependency is automatically added.

1.3. DATABASE CONNECTION
---------------------------------------------------------------------------------
Under the same (src/main/resources) folder, the next file should be created:
    - application.properties
This file contains configuration and environment-specific properties of the application, mainly for Hibernate (part of Spring Data JPA core).
Alternatively, a Yaml file should be created.
Visit the SPRING APPLICATION PROPERTIES page for details.

1.4. PRE-SETTINGS
---------------------------------------------------------------------------------
Once the project is on the local drive, following the next steps can be advised:
    - add new lines to .gitignore file
    - add README.md file to project (on same level with pom.xml file)
    - open the project in an IDE if needed (e.g. IntelliJ IDEA)
    - publish the project on a versioning site (e.g. GitHub, GitBucket) as a repository
    - make settings to the remote repository on the appropriate site

EXAMPLE FOR ADDING NEW LINES TO .GITIGNORE:
.mvn/
mvnw
mvnw.cmd
END OF EXAMPLE

EXAMPLE FOR README.MD FILE:
# Book registry and management (Hexagonal, Java, Spring Boot, Spring Data JPA, Spring Validation, PostgreSQL, REST, ThymeLeaf)
<p>View-based Spring Boot web application for representing and managing physical and electronic books and their authors.</p>
<p>Next to its main purpose, this project has been made in order to demonstrate coding capabilities of the owner (backend web development).</p>
<p>Structure: hexagonal</p>
<p>Language: Java 17</p>
<p>Libraries: Java Core, Spring Boot 3, Spring Data JPA, Spring Validation, PostgreSQL, H2, MockMVC, Mockito, JUnit 5, ThymeLeaf</p>
<p>Build system: Maven</p>
<p>IDE: IntelliJ IDEA</p>
<p>Demonstrated knowledge: Clean Code, Best Practices, Test-driven Development, Unit Test, REST, Model&View, Streams, Backend Web Development, Templates, HTML, CSS</p>
END OF EXAMPLE

While the database is not connected, the application will fail to start.
Therefore, during development it is advised to rem-out the JPA dependency.
Please remember to make it alive when development of the Storage layer starts.
After modifying the pom.xml, in IntelliJ IDEA, right-click on the pom.xml and select the Maven/Reload Project menu item.
Alternative way is to type "mvn compile" to make Maven to find and install all what is needed.

=================================================================================
2. CREATING CLASSES AND DIRECTORIES
=================================================================================
The framework needs several classes in order to work at top efficiency and to follow best practices:
    - Main (application)
    - Controller
    - Service
    - Repository
    - Entity

The Main class will launch the web application.
The Controller class equals with the Communication layer.
The Service class represents the Business Layer and or a hub for other Business layer classes.
The Repository class represents the Data (Storage) layer.
The Entity class forms the data element itself.

Although the Main class is very short in code, and some schools use it for inserting the Controller endpoints into it, furthermore the controller methods could contain processing code as well, the best practice is to keep the layers separated on class level, which structure creates and keeps modularity and independent unit tests become possible.
There can be several controllers, their service classes and several repository classes. In case of complex class structure of data elements, storage, service and controller can be separated by the structure, best practice is to do so which further increases modularity. In such case the three layers will be formed by theoretically summarizing the right independent classes.

EXAMPLE FOR CLASS STRUCTURE, COMMON CONTROLLER AND SERVICE, MONOLITH ARCHITECTURE:
web application class
    L common package
        L service class
        L controller class
    L 1. package
        L entity class
            L subclasses
        L repository interface
    L 2. package
        L entity class
            L subclasses
        L repository interface
END OF EXAMPLE

EXAMPLE FOR CLASS STRUCTURE, INDEPENDENT APPLICATION LAYERS, MICROSERVICES ARCHITECTURE:
web application class
    L gateway package
        L controller class
    L 1. package
        L entity class
            L subclasses
        L repository interface
        L service class
        L controller class
    L 2. package
        L entity class
            L subclasses
        L repository interface
        L service class
        L controller class
END OF EXAMPLE

EXAMPLE FOR CLASS STRUCTURE, ONE MICROSERVICE:
n. package
    L entity class (JPA entity representing database table rows)
    L document class (MongoDB document representing database documents)
    L repository interface (Spring Data JPA repository for database operations)
    L repository interface (Spring Data MongoDB repository for database operations)
    L dto class (Data Transfer Objects for encapsulating request and-or response data)
    L dto Collection element class
    L mapper interface (MapStruct mappers for transforming entities to DTOs and vice versa)
    L service class (containing business logic)
    L util class (utility)
    L controller class (REST controllers to handle HTTP requests)
    L config class (configuration classes, e.g. security, application properties)
    L exception classes (custom exception classes and handlers)
END OF EXAMPLE

EXAMPLE FOR CLASS STRUCTURE, MICROSERVICES, COMMON DOMAIN AND DTO LAYER:
domain package
    L entity and document classes
    L repository interfaces
dto package
    L dto classes
    L Collection element classes
n. package
    L dto class (Data Transfer Objects for encapsulating request and-or response data)
    L mapper interface (MapStruct mappers for transforming entities to DTOs and vice versa)
    L service class (containing business logic)
    L util class (utility)
    L controller class (REST controllers to handle HTTP requests)
    L config class (configuration classes, e.g. security, application properties)
    L exception classes (custom exception classes and handlers)
gateway package
    L controller class
END OF EXAMPLE

Under the src/main/resources folder, the next folders should be created:
    - static (contains the static part of frontend)
    - templates (contains template (pre-set page) part of frontend, handled with backend web development)

Spring Boot uses automatism when the web application starts (invoking Main class):
    - detects the Spring hierarchy (based upon class dependency injections)
    - creates all Spring components from bottom to up (by calling their constructors; all components will be singletons)
    - finally Spring Boot injects the controller class dependencies into the main application class and starts the application

=================================================================================
3. CLASS DEPENDENCIES IN SPRING
=================================================================================
Visit the SPRING CLASS DEPENDENCIES page for description.

=================================================================================
4. MAIN (APPLICATION) CLASS
=================================================================================
Visit the SPRING BOOT MAIN CLASS page for description.

=================================================================================
5. ENTITY
=================================================================================
Visit the SPRING BOOT ENTITY page for description.

=================================================================================
6. REPOSITORY
=================================================================================
Visit the SPRING BOOT REPOSITORY page for description.

=================================================================================
7. SERVICE CLASS
=================================================================================
Visit the SPRING BOOT SERVICE page for description.

=================================================================================
8. CONTROLLER CLASS
=================================================================================
Visit the SPRING BOOT CONTROLLER page for description.

=================================================================================
9. CONFIGURATION
=================================================================================
Visit the SPRING APPLICATION PROPERTIES page for details.

=================================================================================
10. JSON AND XML CONVERSION
=================================================================================
XML or JSON conversion happens when the application is RESTful.
Both data types are series of characters therefore given values in it are practically texts.
Data written in JSON need the less amount of space.
The XML file contains data in tagged format. Using it means nice hierarchic form for the cost of space.

The transfer data is converted from an instance of a class or converted back, will contain fields and their values, in their characterized form. For this, the class must be serializable. Serialization will be handled by Spring.
Data can be sent and received as original object or in a Map. In case Map is used, keys will be the names of the variables. In this variant all values will be converted to String format since in the Map values will be Strings as well.
In case of received JSON or XML data, if the deserialization was unsuccessful, the server response will contain error code.

The JSON or XML fields must match exactly with the object fields by name and type, and the class must have exactly the same number of fields the JSON or XML contains.
The class name or the object variable name can be different at backend and frontend.

=================================================================================
11. START AND STOP WEB APPLICATION
=================================================================================
To start the web application, use Maven in console:
    - mvn spring-boot:run
or
    - mvnw spring-boot:run
The Maven will compile the project, then attempt to start it.

To stop the application, press ^C in the console.

In case no profile is defined, the Maven will start the application on localhost:8080 by default.
So, in browser the base path will be localhost:8080.

At start, Spring Boot will create an instance from the controller, through class injection (best practice) an instance will be created from the service class and then from the repository class.

MORE HERE: Spring Boot tutorial, 1:17:00, https://www.youtube.com/watch?v=9SGDpanrc8U
MORE HERE: Spring Data JPA tutorial, https://www.youtube.com/watch?v=8SGI_XS5OPw
MORE HERE: https://spring.io/guides/tutorials/rest/
MORE HERE: https://www.digitalocean.com/community/tutorials/spring-configuration-annotation
MORE HERE: https://www.geeksforgeeks.org/how-to-create-a-rest-api-using-java-spring-boot/

=>WEB APPLICATION
=>SPRING BOOT THYMELEAF
=>SPRING CLASS DEPENDENCIES
=>CLASSES;13. CLASS DEPENDENCY INJECTION
=>SPRING APPLICATION PROPERTIES
=>SPRING BOOT MAIN CLASS
=>SPRING BOOT ENTITY
=>SPRING BOOT REPOSITORY
=>SPRING BOOT SERVICE
=>SPRING BOOT CONTROLLER
=>SPRING BOOT REQUESTS
=>SPRING BOOT CONFIGURATION
=>SERIALIZATION
=>SPRING BOOT TESTS
=>POSTGRESQL
=>H2
=>SPRING BOOT VALIDATION
=>SPRING EXCEPTION HANDLING
=>MOCKITO
=>SPRING BOOT FILE STORAGE WITH THYMELEAF EXAMPLE
