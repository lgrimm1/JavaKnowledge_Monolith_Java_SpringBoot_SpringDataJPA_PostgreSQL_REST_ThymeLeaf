=================================================================================
POSTGRESQL
=================================================================================
The PostgreSQL (or postgres) is a relational database system. Free, popular, powerful.
Database names, column names, index names etc. should be lowercase.

1. SETTING UP
2. CONSOLE
3. INDEX (KEY) TYPES
4. CHARACTER TYPES
5. NUMERIC AND ARRAY TYPES
6. OTHER TYPES
7. BACKEND CONNECTION PARAMETERS
8. BACKUP, RESTORE

=================================================================================
1. SETTING UP
=================================================================================
During installation, important parameters are asked from the user:
    - database root username and password
    - communication port (default: 5432)
    - default user (postgres) username and password

After installation, find the bin directory (e.g. c:\Program Files\PostgreSQL\15\bin\), and add it to the PATH system variable.

=================================================================================
2. CONSOLE
=================================================================================
The console can be reached by launching system console and typing psql command, or launching the SQL SHELL provided by the installer.
The console will ask for user password for a local user different from the default postgres user (or whatever user was given during installation).

Workaround to use the system console:
    - psql -U <username> -W command, or
    - psql -d <db-name> -U <username> -W, or
    - psql -h <host address> -d <db-name> -U <username> -W, or
    - psql "sslmode=require host=<db-address> dbname=<db-name> user=<username>"

Commands in psql shell:
||Command|Description||
||\l|list of existing databases||
||\c <db-name>|switch to another database with the same user||
||\dt|list of database tables||
||\d <table-name>|describe a table (table structure)||
||\d+ <table-name>|describe a table (table structure), more information||
||\dn|lists all database schemas||
||\du|list users and their roles||
||\du <username>|list a specific user and its roles||
||\df|list all the functions from database (schema it belongs, names, result data type, argument data types, type)||
||\dv|list all the database views||
||\o|save terminal query to a file||
||\i <file-name>|run commands from file||
||\q|quit from the PSQL interface||

Save a query to a file:
\o <file_name>
...run the psql commands...
\o
The closing command stops the process and send output to terminal (file was saved continuously until this point).

Console SQL commands:
CREATE DATABASE db-name;
GRANT ALL PRIVILEGES ON DATABASE "db-name" TO username;

=================================================================================
3. INDEX (KEY) TYPES
=================================================================================
In postgres the column types can be used for defining index (or key).
In a postgres table, indexes (keys) can be defined on a single column or on more columns. In the latter case, the combination of the columns will be indexed.
Primary key can be only one over a table. By defining it, the search and navigation in the table becomes much faster.
Any number of additional keys can be defined over a table.
Postgres creates index table (key table) per key. Such table contains existing values of the key and pointers for the row of the table. Searching in these tables is faster than searching in a whole table due to accessing much less data.
Any column type can be used in indexing in case that type can produce comparable values.
Primary key values must be not just comparable but unique as well.
In postgres, there are column types many administrators and developers use, see below.

||Type|Description|Pros|Cons|Remarks||
||BIGSERIAL|64-bit|convenient and simple, lesser index table size, needs lesser write time to logs|there can be gaps in values, predictable, unique only in a table|most popular||
||SERIAL|32-bit|convenient and simple, lesser index table size, needs lesser write time to logs|there can be gaps in values, predictable, unique only in a table|can be ideal for middle-size tables||
||SMALLSERIAL|16-bit|convenient and simple, lesser index table size, needs lesser write time to logs|there can be gaps in values, predictable, unique only in a table|ideal for smaller tables||
||Postgres Native UUID v4|128-bit|no gaps in values, unpredictable, unique between databases as well|higher index table size, needs higher write time to logs|postgres uses generator algorithm, canonically encoded as a 36 character string||
||Postgres uuid-ossp extension|128-bit|same as previous|same as previous|commonly used in earlier postgres versions, postgres uses generator algorithm based on random numbers, creates v4 UUID, supports v1, v3, v5 UUID numbers||
||UUID v4 saved as VARCHAR(36)|128-bit number written as text|no pros|in greater tables needs more insertion time, needs more size|-||
||ULID|128-bit|lexicographically sortable, canonically encoded as a 26 character string, uses 5 bit per character|no native support yet, need custom generator method for better server performance, open for timing information|48 bit for unix time, 80 bit for random number, uses Crockfordâ€™s base32 for characters (5-bit, not 8-bit)||
||UUID v6|-|-|experimental, need custom generator method for better server performance|-||

Although the types above are used frequently, in case the [1, Long.MAX_VALUE] interval is enough for the table IDs, the next type can be used for primary index as well:
    - bigint
This type is matching with the Java long or Long types.
Also, the Java int and Integer types are matching with the next postgres type:
    - integer

=================================================================================
4. CHARACTER TYPES
=================================================================================
PostgreSQL provides three primary character types:
    - CHARACTER(n) or CHAR(n): fixed-length, blank padded
    - CHARACTER VARYINGING(n) or VARCHAR(n): variable-length with length limit
    - TEXT: variable unlimited length
(n is a natural number.)

All three types can be used for storing a single character as well as storing a text.
Because their purposes overlap, proper usage should express the data the specific column will be rendered to.

CHAR and VARCHAR, n is given:
    - the type can store text up to n characters (length in characters)
    - when trying to put longer text into, will issue an error
    - when trying to put longer text into, and the over-length part contains only spaces, will truncate the spaces to size and store the text
    - when a text explicitly casts to CHAR(n) or VARCHAR(n), will truncate to size and store the text

CHAR, n is not given:
    equals with CHAR(1), single character mode

VARCHAR, n is not given:
    - will behave as a TEXT type with unlimited capacity
    - will have no difference in performance compared to TEXT

If not defined explicitly with the @Column annotation, Spring will use the next default types.

||Java type|Default PostgreSQL type||
||char, Character|CHAR(1)||
||String|VARCHAR(255)||
||List<Character>|CHAR(1)[]||
||List<String>|VARCHAR(255)[]||

If needed explicitly, map the entity (domain) fields based upon the next.

||Java type|PostgreSQL type|Remarks||
||char, Character|CHAR or CHAR(1)|default by Spring||
||String|TEXT or VARCHAR|unlimited text, general usage||
||String|VARCHAR(n)|given maximum length with validation||
||String|VARCHAR(n)|potential over-length from spaces, truncates to n||
||List<Character>, char[], Character[]|CHAR[] or CHAR(1)[]|not needed explicitly, default by Spring||
||List<String>, char[], Character[]|TEXT[] or VARCHAR[]|unlimited text elements, general usage||
||List<String>, char[], Character[]|VARCHAR(n)[]|given maximum element length with validation||
||List<String>, char[], Character[]|VARCHAR(n)[]|potential over-length from spaces in elements, truncates to n||

Types definitions are valid in uppercase and lowercase forms as well (e.g. text and TEXT).
The array marking ([]) is equal with the separate array keyword (e.g. varchar(3)[] and varchar(3) array).

=================================================================================
5. BOOLEAN, NUMERIC AND ARRAY TYPES
=================================================================================
||Java type|PostgreSQL type||
||boolean|BIT, BOOLEAN||
||short|SMALLINT, INT2||
||int|INTEGER, INT4||
||long|BIGINT, INT8||
||float|REAL||
||double|DOUBLE, DOUBLEPRECISION||
||BigDecimal|DECIMAL||
||byte[]|BYTEA||

For wrapper types (arrays are included), the same PostgreSQL types can be used.

For primitive and wrapper arrays, for wrapper Collection types, all the above types can be used with [] marking, e.g.:
    - BIT[], INTEGER[]

=================================================================================
6. OTHER TYPES
=================================================================================
Java Spring Data JPA and Hibernate in the background does automated mapping to and from PostgreSQL types via SQL/JDBC. The latter serves as a bridge.
Mapping of the most important types are in the next table.
Most important PostgreSQL-Java type pairs:
    - bigint - long
    - bit/boolean - boolean
    - char - char
    - bytea - byte[]

||POSTGRESQL DATA TYPE|SQL/JDBC TYPE|JAVA TYPE||
||bool|BIT|boolean||
||bit|BIT|boolean||
||int8|BIGINT|long||
||bigserial|BIGINT|long||
||oid|BIGINT|long||
||bytea|BINARY|byte[]||
||char|CHAR|String||
||bpchar|CHAR|String||
||numeric|NUMERIC|java.math.BigDecimal||
||int4|INTEGER|int||
||serial|INTEGER|int||
||int2|SMALLINT|short||
||smallserial|SMALLINT|short||
||float4|REAL|float||
||float8|DOUBLE|double||
||money|DOUBLE|double||
||name|VARCHAR|String||
||date|DATE|java.sql.Date||
||time|TIME|java.sql.Time||
||timetz|TIME|java.sql.Time||
||timestamp|TIMESTAMP|java.sql.Timestamp||
||timestamptz|TIMESTAMP|java.sql.Timestamp||
||cardinal_number|DISTINCT|Mapping of underlying type||
||character_data|DISTINCT|Mapping of underlying type||
||sql_identifier|DISTINCT|Mapping of underlying type||
||time_stamp|DISTINCT|Mapping of underlying type||
||yes_or_no|DISTINCT|Mapping of underlying type||
||xml|SQLXML|java.sql.SQLXML||
||refcursor|REF_CURSOR|Undefined||
||_abc|ARRAY|java.sql.array||

=================================================================================
7. BACKEND CONNECTION PARAMETERS
=================================================================================
These parameters are declared in the application.properties or a Yaml file under the project directory.
Visit SPRING APPLICATION PROPERTIES page for more details.

=================================================================================
8. LIVE DATABASE, BACKUP, RESTORE
=================================================================================
When dealing with live database or database of which structure we should not modify, you must carefully define the database connection mode from create, drop, create-drop etc. to none. This instructs Hibernate not to touch the structure nor the data.

The data and structure in a database should be fall under regular backup. This can be done e.g. in the GUI of PostgreSQL. On the database root bring on the popup menu and select Backup or similar option.
Under the Query Options tab, do not forget to mark Include DROP DATABASE. This means upon restoring the SQL commands will firstly delete the database, then create it. If you do not select this option, restoring will fail do to existing schemes.

When restoring is necessary, in some cases the backup file which contains excessive SQL commands, when the existing database is not empty, another error will raise. Because you want to overwrite the original database contents with the saved one, you must delete the database before restoring.
In order to so this, bring up the popup menu on the database root, and select Delete (or if there are live connections you want to close immediately, choose the Delete(Force) option).
Then, Create the database with the very same name and parameters the original was created before, and then from the popup, choose the Restore option.

When the database was created via Spring Data JPA (Hibernate), it is advised to create the database by starting the application with application properties ideal for drop first, then for create-only.

=>SPRING BOOT
=>SPRING BOOT ENTITY
=>SPRING BOOT ENTITY JOIN
=>SPRING BOOT REPOSITORY
=>SPRING APPLICATION PROPERTIES
=>SQL AND NOSQL DATABASES
=>SQL SELECT
=>SQL CREATE
=>SQL ALTER AND DATA MANIPULATION
=>SQL TRANSACTION AND EXECUTION PLAN AND ADMINISTRATION
