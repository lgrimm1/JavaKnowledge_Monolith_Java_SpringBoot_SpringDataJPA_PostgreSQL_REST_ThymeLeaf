=================================================================================
SPRING BOOT ENTITY
=================================================================================
In case of SQL database, before any development of the repository class, an entity must be defined.
This class forms the basic element type which will be sent and received to-from the in-memory container or the database by the repository class, and processed by the service class.
Because objects of this entity will be checked for equality e.g. in tests, overriding the equals() and hashCode() methods of Object class is mandatory.
In case the entity will be transferred between backend and frontend, following the rules of serialization is necessary (transient and static fields, serialVersionUID, Serializable, writeObject(), readObject() etc.).
It is advised to express the toString() method of the entity as well.

In order to match the entity with a relational sheet, an ORM (Object Relational Mapper) layer is needed. The database communicates with text or JSON data which must be transformed to instances of the domain class. The Spring provides the ORM layer for entities.

1. NO-JPA ENTITY CLASS
2. JPA ENTITY CLASS

=================================================================================
1. NO-JPA ENTITY CLASS
=================================================================================
In case of in-memory (no database) container, this class should provide an immutable data holder.

EXAMPLE FOR AN ENTITY CLASS (NO-JPA):
package PackageName;

public class EntityClassName {

	private long id;

	//private field definitions

	public EntityClassName(long id, ...) {
	    this.id = id;
	    ...
	}

	//getters

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		EntityClassName entityClassName = (EntityClassName) o;
		return Objects.equals(id, entityClassName.id) && ...);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, ...);
	}

	@Override
	public String toString() {
		return "EntityClassName{" +
				"id=" + id +
                ...
				'}';
	}
}
END OF EXAMPLE

=================================================================================
2. JPA ENTITY CLASS
=================================================================================
Developing JPA entity class can start with developing a no-JPA entity. A no-JPA entity can be easily transformed to a JPA-entity by filling it with the correct annotations and checking the existence of the needed constructors and methods (see later).
When the class is refactored to be a JPA entity class, before the first test run, make the JPA dependency in the pom.xml alive.
The entity is called domain class under Spring JPA.

In case the repository solution will be not in-memory, before the first test run, also need to create a new and empty database in PostgreSQL or other database system beforehand via using console or admin interface provided by the database system.
For console, the next SQL commands are needed.

EXAMPLE FOR SQL COMMANDS NEEDED FOR PREPARING DATABASE FOR BACKEND DEVELOPMENT:
CREATE DATABASE db-name;
GRANT ALL PRIVILEGES ON DATABASE "db-name" TO username;
END OF EXAMPLE

The db-name is name of the database, username is the user which we want to use to manage the database, both are set in the application.properties or a Yaml file.
The default username e.g. under PostgreSQL is postgres.
Visit the SPRING APPLICATION PROPERTIES page for the know-how.

The entity will represent a row in a table, also carries the backend and database behaviour connected to the correspondent table via annotations.
The Spring Data framework (especially the database dependency) will handle the conversion processes from-to the database.

The JPA software development aims for the backend. The database itself is not part of the backend which means the new database is needed for software development only at first.
All application launch starts with that Hibernate in the background fills the database with tables and other elements.
Every action with the repository will be rendered to SQL commands by Hibernate and also sent to the database.
All application ends with that Hibernate empties the database for rows, tables and everything else unless configured differently or the software is in production. Visit the SPRING APPLICATION PROPERTIES page for further details.

2.1. GENERAL CLASS STRUCTURE
2.2. ID (PRIMARY KEY) FIELD
2.3. INDEX ON NON-PRIMARY KEY FIELD
2.4. OTHER FIELDS
2.5. METHODS
2.6. ENTITY CLASS EXAMPLES
2.7. MAPPING ARRAY COLUMNS IN PURE JPA

2.1. GENERAL CLASS STRUCTURE
---------------------------------------------------------------------------------
The class must be public and must not be final in order to let Spring accessing and using it.
The entity class is marked with Spring (Hibernate) class-level annotations.
The relation between class fields and table fields are marked with field-level annotations.

||ANNOTATION LEVEL|ANNOTATION|DESCRIPTION||
||class|@Entity|marks that the class is a Spring Data entity||
||class|@Table|defines the corresponding table name in the database in case the two are not the same (most cases)||
||class|@NamedQuery|optional; defines a domain-level query on the entity and renders it to a query method signature from within the domain||
||field|@Column|defines the corresponding column properties||

The Spring name of the entity is defined by the class name. This can be overwritten via using the optional name parameter:
    - @Entity(name = "entityName")

The @Table annotation can have two parameters:
    - name = "table name in database"
    - schema = "name of set of tables in the database" (optional)

The @NamedQuery annotation has the next parameters:
    - name = "EntityClassName.queryMethodName"
    - query = "JPQL expression"
By using it, the query will be bounded to the domain class and will be accessible by calling the method in static mode:
    - variable = EntityClassName.queryMethodName();
For JPQL examples see the SPRING BOOT REPOSITORY page.
By using this annotation on a domain class, annotation-based configuration is created.

The @Column annotation can have the next parameters:
    - name = "column name in database"
    - length = number (maximum length of the text values, default is 255)
    - precision = number (maximum number of digits, default is zero)
    - scale = number (maximum number of decimal digits, default is zero)
    - nullable = true|false (does the column accept null as value, default is true)
    - unique = true|false (is accepting unique value for the column obligatory, default is false, creates an index)
    - insertable = true|false (is accepting new rows, default is true)
    - updatable = true|false (is accepting updating existing rows, default is true)
    - table = "table name" (default is "")
    - columnDefinition = "" (default is "")
In database tables, every cell value can be null unless marked differently. Therefore, every type when transferred or set directly to and in database, can be null in the database so marking the column for nullability is preferred even in case of primitive type in entity.
In case the @Column annotation is not used on a field, that field will be matched with table column by the field name, and will apply default values of all parameters of the virtually non-existent annotation.
If unique = true argument is present in the @Column annotation, Hibernate will create a UNIQUE constraint on that field in SQL. It creates an index on that field but that index will not be optimized for queries. If fast lookups are needed, create an index instead.
Please note, Spring will map VARCHAR(256) to any String field in case columnDefinition is not given. Visit the POSTGRESQL page for details on character types.

EXAMPLE FOR UNIQUE AND NULLABLE PARAMETERS MATCH WITH SQL EXPRESSIONS:
// entity class
@Entity
class entity {

@id
int Id;

@Column(unique=..., nullable=...)
String Name;
}

-- unique=false, nullable=false
CREATE TABLE entity (
Id INT PRIMARY KEY,
Name VARCHAR(255) NOT NULL
);

-- unique=true, nullable=false
CREATE TABLE entity (
Id INT PRIMARY KEY,
Name VARCHAR(255) UNIQUE NOT NULL
);

-- unique=false, nullable=true
CREATE TABLE entity (
Id INT PRIMARY KEY,
Name VARCHAR(255)
);

-- unique=true, nullable=true
CREATE TABLE entity (
Id INT PRIMARY KEY,
Name VARCHAR(255) UNIQUE
);
END OF EXAMPLE

2.2. ID (PRIMARY KEY) FIELD
---------------------------------------------------------------------------------
Every JPA entity must have a primary key which follows the standard table structure in relational database world. This is an ID field.

||ANNOTATION LEVEL|ANNOTATION|DESCRIPTION||
||field|@Id|marks that the field will represent a primary key column in the table of the database||
||field|@SequenceGenerator|marks the ID generator parameters||
||field|@GeneratedValue|marks ID generator type||

The ID can be generated via following four strategics, defined with the @GeneratedValue annotation:
    - AUTO (Hibernate will decide the best strategy)
    - TABLE (not used anymore, slow, avoid it)
    - SEQUENCE (preferred for better performance and flexibility, needs a sequence generator, not existent in SQLite and older MySQL)
    - IDENTITY (uses auto-increment provided by the database, good for int or Integer fields in Java, INT or SERIAL column-types in database)
When using the SEQUENCE strategy, the ID generator also needs a sequence generator with which the IDs are generated.

The @Id annotation marks that the field matches with the table column with primary key values.
Using the @Column annotation is still needed.

The @SequenceGenerator annotation also marks the ID field and has the next parameters:
    - name = "generator_name" (practically same as sequence_name)
    - sequenceName = "sequence_name"
    - allocationSize = 1 (defines how the ID value will increase)
With the values above, the generator will start the IDs with 1 and steps with 1 (allocationSize). The maximum value will be determined by the field type (e.g. long or Long will be BIGINT in the table, int or Integer will be INT in the table).

The @GeneratedValue annotation also marks the ID field, and has the next parameters:
    - strategy = GenerationType.SEQUENCE
    - generator = "sequence_name" (connects the strategy with the sequence generator defined with @SequenceGenerator annotation)

EXAMPLE FOR ID DEFINITION:
@Id
@Column(name = "id")
@SequenceGenerator(name = "id_generator", sequenceName = "id_generator", allocationSize = 1)
@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "id_generator")
private long id;
END OF EXAMPLE

2.3. INDEX ON NON-PRIMARY KEY FIELD
---------------------------------------------------------------------------------
An index is needed on a field if on the corresponding column queries are executed regularly.
The indexes are defined on class-level under the @Table annotation. The index can be defined on one or more fields, and name can be defined as well.
If unique = true argument is present in the @Column annotation, Hibernate will create a UNIQUE constraint on that field in SQL. It creates an index on that field but that index will not be optimized for queries. If fast lookups are needed, create a unique index instead.
Using the unique definition under @Column and the @Index argument under the @Table annotation will create two independent indexes on that field.
It is possible to create composite index (more than one column).
In case of unique composite index, the @Index formula differs (uniqueness through a CONSTRAINT). In this case, it is not possible to name the index itself.
It is not possible to create an index type beside the default of the database system. If you want to define a different index type, apply SQL commands directly on the database.

EXAMPLE FOR CREATING DEFAULT-TYPE INDEX:
// Spring
@Entity
@Table(name = "users", indexes = {
    @Index(name = "idx_user_email", columnList = "email", unique = true), // unique index
    @Index(name = "idx_user_created_at", columnList = "created_at"),
    @Index(name = "idx_user_name", columnList = "name")
})
public class User {
    @Id
    private Integer id;
    @Column
    private String email;
    @Column(nullable = false)
    private String name;
    @Column(nullable = false)
    private LocalDateTime created_at;
}

-- SQL generated by Hibernate
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255),
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL
);
CREATE UNIQUE INDEX idx_user_email ON users(email);
CREATE INDEX idx_user_created_at ON users(created_at);
CREATE INDEX idx_user_name ON users(name);
END OF EXAMPLE

EXAMPLE FOR CREATING COMPOSITE DEFAULT-TYPE INDEX:
// Spring
@Entity
@Table(name = "users", indexes = {
    @Index(name = "idx_name_phone", columnList = "name, phone")
})
public class User {
    @Id
    private Integer id;
    @Column(nullable = false)
    private String name;
    @Column(nullable = false)
    private String phone;
}

-- SQL generated by Hibernate
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(255) NOT NULL
);
CREATE INDEX idx_name_phone ON users(name, phone);
END OF EXAMPLE

EXAMPLE FOR CREATING COMPOSITE DEFAULT-TYPE INDEX:
// Spring
@Entity
@Table(name = "users",
       uniqueConstraints = @UniqueConstraint(name = "uq_name_phone", columnNames = {"name", "phone"}),
       indexes = {
           @Index(name = "idx_name_phone", columnList = "name, phone")
       }
)
public class User {
    @Id
    private Integer id;
    @Column(nullable = false)
    private String name;
    @Column(nullable = false)
    private String phone;
}

-- SQL generated by Hibernate
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(255) NOT NULL
    CONSTRAINT uq_name_phone UNIQUE (name, phone)
);
CREATE INDEX idx_name_phone ON users(name, phone);
END OF EXAMPLE

2.4. OTHER FIELDS
---------------------------------------------------------------------------------
||ANNOTATION LEVEL|ANNOTATION|DESCRIPTION||
||@Version|defines the element version number or whether the element is new||
||@Transient|will not match with column, will be calculated with constructor or with other code segments e.g. getter-setter or in service class||
||@Temporal|for older Spring JPA, marks that the date or time field will contain temporal data||
||@Enumerated|marks that the field contains enum||
||@Lob|large object||

The @Version annotation defines that a field used as a version number for the element. This field will be used by the repository connected to the ID field:
    - if null or 0: there is no version number (for version number the element will be considered as new)

EXAMPLE FOR ID AND VERSION DEFINITION:
@Id
@Column(name = "id")
@SequenceGenerator(name = "id_generator", sequenceName = "id_generator", allocationSize = 1)
@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "id_generator")
private long id;

@Version
@Column(name = "version")
private int version
END OF EXAMPLE

A @Transient field is not a persistence field, it is not recorded and maintained by the storage. These fields are for handling structured data which can not or should not be found in the storage (e.g. special data or a List which is not matchable with database column types under all databases).
A transient field can be used as a generated value for getting this specific data, but of course it is possible to set persistence fields through transient fields as well.
A typical solution for storing array or List data without forcing the database to store these.
Spring will access the database records by using the persistence fields. Through the repository, the backend will access the transient fields. In case setting the persistence fields does not require separated calculating, use the normal constructors and setters, and create getters for transient fields. If creating the persistence fields requires separated codes, create setters for the transient fields which will set the persistence fields upon calling them. See the example below.

The @Temporal annotation has a TemporalType parameter e.g. TemporalType.DATE.
The newer JPA supports the next field types (no need for annotation):
    - LocalDate
    - LocalTime
    - LocalDateTime
    - OffsetTime
    - OffsetDateTime

The @Enumerated annotation can have the next parameters:
    - [value = ]EnumType.STRING (will use the String value of the enum)
    - [value = ]EnumType.ORDINAL (default, will use ordinals of the enum)
In case the order of possible enum values can change in time, use String version in order to prevent necessary database processing.

If needed, transient fields can be connected to table columns as well, by using @Column annotation.

The @Lob annotation marks that the field will contain LOB (Large OBject) with variable length. It has two variants, defined with columnDefinition parameter of @Column annotation:
    - CLOB: character LOB
    - BLOB: binary LOB
Using @Lob annotation means that the data which is probable a file, must be converted to and back the matching array field (byte[] or char[]) of the entity. Upon persist and retrieval Hibernate will map that field to a BLOB or a CLOB table column. The database must support BLOB and-or CLOB.

EXAMPLE FOR LOB DEFINITION:
@Lob
@Column(name = "photo", columnDefinition="BLOB")
private byte[] photo;
END OF EXAMPLE

2.5. METHODS
---------------------------------------------------------------------------------
The default constructor is needed by the Spring JPA. By defining it, the class will not be immutable by definition.
Custom constructors (which serve as collective setter method as well) is optional.
When implementing CRUD API, two additional constructors are needed: one with all fields except the ID, and one with all fields.
In case of using JPA, the entity will need all getters and setters in order to have access to them. However, with this the entity will not be immutable by definition.

In case a method argument must not be null, that argument can be marked with the @NonNull annotation. Please note, passing null to a @NonNull argument results an HTTP500 exception.

EXAMPLE FOR MARKING A NON-NULL METHOD ARGUMENT:
public void EntityName(..., @NonNull parameterType, parameterName, ...) {...}
END OF EXAMPLE

2.6. ENTITY CLASS EXAMPLES
---------------------------------------------------------------------------------
EXAMPLE FOR AN ENTITY CLASS (JPA, CRUD API, WITH VERSION NUMBER):
package PackageName;

import jakarta.persistence.*;
import java.util.*;

@Entity
@Table(name = "database_table_name")
public class EntityClassName {

	@Id
	@SequenceGenerator(name = "sequence_name", sequenceName = "sequence_name", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequence_name")
	@Column(name = "id_column_name_in_database_table")
	private long id;

	@Version
	@Column(name = "version_column_name_in_database_table")
	private int version;

	@Column(name = "column_name_in_database_table", ...)
	//private field definition

	public EntityClassName() {
	}

	public EntityClassName(...) {
	    ...
	}

	public EntityClassName(long id, ...) {
	    this.id = id;
	    ...
	}

	//getters
	//setters

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		EntityClassName entityClassName = (EntityClassName) o;
		return Objects.equals(id, entityClassName.id) && ...);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, ...);
	}

	@Override
	public String toString() {
		return "EntityClassName{" +
				"id=" + id +
                ...
				'}';
	}
}
END OF EXAMPLE

EXAMPLE FOR CALCULATED ENTITY FIELD (TRANSIENT, ONLY FOR GENERATING VALUE FROM PERSISTENCE FIELDS):
package PackageName;

import jakarta.persistence.*;
import java.util.*;

@Entity
@Table(name = "database_table_name")
public class EntityClassName {

	@Id
	@SequenceGenerator(name = "sequence_name", sequenceName = "sequence_name", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequence_name")
	@Column(name = "id_column_name_in_database_table")
	private long id;

	@Column(name = "birthday", ...)
	private LocalDate birthday;

	@Transient
	private integer age;

	public EntityClassName() {
	}

	public EntityClassName(LocalDate birthday) {
	    this.birthday = birthday;
	}

	public EntityClassName(long id, LocalDate birthday) {
	    this.id = id;
	    this.birthday = birthday;
	}

    //getters-setters for id and birthday fields

    public Integer getAge() {
        return Period.between(LocalDate.now().getYears() - this.birthday);
    }

    public void setAge(int age) {
        this.age = age;
    }

    //equals(), hashCode(), toString() methods for all fields
}
END OF EXAMPLE

EXAMPLE FOR CALCULATED ENTITY FIELD (TRANSIENT, FOR GETTING DATA FROM AND SETTING PERSISTENCE FIELDS):
package PackageName;

import jakarta.persistence.*;
import java.util.*;

@Entity
@Table(name = "database_table_name")
public class EntityClassName {

	@Id
	@SequenceGenerator(name = "sequence_name", sequenceName = "sequence_name", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequence_name")
	@Column(name = "id_column_name_in_database_table")
	private long id;

	@Column(name = "surname", ...)
	private String surname;

	@Column(name = "firstname", ...)
	private String firstname;

	@Transient
	private String names;

	public EntityClassName() {
	}

	public EntityClassName(String surname, String firstname) {
	    this.surname = surname;
	    this.firstname = firstname;
	}

	public EntityClassName(long id, String surname, String firstname) {
	    this.id = id;
	    this.surname = surname;
	    this.firstname = firstname;
	}

    //getters-setters for id, surname and firstname fields

    public String getNames() {
        return surname + ", " + firstname;
    }

    public void setNames(String names) {
        int sepPos = names.indexOf(", ");
        surname = names.substring(0, sepPos);
        firstname = names.substring(sepPos + 2);
    }

    //equals(), hashCode(), toString() methods for all fields
}
END OF EXAMPLE

2.7. MAPPING ARRAY COLUMNS IN PURE JPA
---------------------------------------------------------------------------------
Spring Boot pairs column types and entity fields automatically.
In case Spring Data JPA is used but without Spring Boot, must properly map the columns and the fields together.
Visit the SPRING DATA JPA MAPPING ARRAY COLUMNS page for details.

=>SPRING BOOT
=>SPRING BOOT REPOSITORY
=>SPRING APPLICATION PROPERTIES
=>SPRING BOOT VALIDATION
=>SERIALIZATION
=>SQL AND NOSQL DATABASES
=>POSTGRESQL
=>H2
=>SQL SELECT
=>SPRING BOOT TESTS;2. ENTITY TEST
=>SPRING BOOT CONTROLLER;9. IMPLEMENT REST CRUD API
=>SPRING DATA JPA MAPPING ARRAY COLUMNS
=>SPRING BOOT ENTITY JOIN
